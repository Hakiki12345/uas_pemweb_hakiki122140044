import os
import datetime
from pyramid.config import Configurator
from pyramid.renderers import JSON
from pyramid.security import Allow, Everyone
from pyramid.authorization import ACLAuthorizationPolicy
from pyramid.authentication import SessionAuthenticationPolicy
from pyramid.session import SignedCookieSessionFactory
from sqlalchemy import engine_from_config
from sqlalchemy.orm import sessionmaker, configure_mappers
from zope.sqlalchemy import register as zregister

from .models.base import Base

def get_root(request):
    return Root()

class Root:
    __acl__ = [
        (Allow, Everyone, 'view'),
        (Allow, 'role:admin', 'admin'),
    ]
    
    def __init__(self):
        pass

def main(global_config, **settings):
    """ This function returns a Pyramid WSGI application.
    """
    config = Configurator(settings=settings)
    # Transaction manager
    config.include('pyramid_tm')
    
    # Set up session-based authentication
    session_secret = settings.get('session.secret', 'your-secret-key-change-in-production')
    session_factory = SignedCookieSessionFactory(
        secret=session_secret,
        timeout=86400,  # 24 hours in seconds
        cookie_name='ecommerce_session',
        max_age=86400,  # 24 hours in seconds
        secure=False,  # Set to True in production with HTTPS
        httponly=True
    )
    config.set_session_factory(session_factory)
    
    # Configure authentication and authorization policies
    authn_policy = SessionAuthenticationPolicy()
    config.set_authentication_policy(authn_policy)
    config.set_authorization_policy(ACLAuthorizationPolicy())
    config.set_root_factory(get_root)
    
    # Configure JSON renderer
    json_renderer = JSON()
    json_renderer.add_adapter(datetime.datetime, lambda obj, request: obj.isoformat())
    config.add_renderer('json', json_renderer)
    
    # Set up database
    engine = engine_from_config(settings, prefix='sqlalchemy.')
    config.registry.dbmaker = sessionmaker(bind=engine)
    
    # Configure CORS
    config.include('cornice')
    cors_origins = settings.get('cors.origins', 'http://localhost:5173').split(',')
    
    # Add CORS policies
    def add_cors_headers(event):
        request = event.request
        response = event.response
        if 'Origin' in request.headers:
            origin = request.headers['Origin']
            print(f'Adding CORS headers for request to {request.path} from origin: {origin}')
            print(f'Request headers: {dict(request.headers)}')
            
            response.headers.update({
                'Access-Control-Allow-Origin': origin,
                'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,PATCH,OPTIONS',
                'Access-Control-Allow-Headers': 'Origin, Content-Type, Accept, Authorization, X-Client-Version, X-Registration-Source',
                'Access-Control-Allow-Credentials': 'true',
            })
    
    # Add CORS headers to all responses
    from pyramid.events import NewResponse
    config.add_subscriber(add_cors_headers, NewResponse)
    
    # Include routes
    config.include('.routes')
    
    # Make request.db available for use in Pyramid
    def add_db_to_request(request):
        # Create a new SQLAlchemy session and link it to the transaction manager
        db = config.registry.dbmaker()
        zregister(db)
        return db
    
    config.add_request_method(add_db_to_request, 'db', reify=True)
    
    config.scan()
    
    return config.make_wsgi_app()
